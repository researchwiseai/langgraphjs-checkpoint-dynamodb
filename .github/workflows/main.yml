name: Checks

on:
    pull_request:
        branches:
            - main
    push:
        branches:
            - main
        paths-ignore:
            - '**/*.json'
            - '**/*.md'
permissions: write-all # Needed for AI reviewer
jobs:
    lint:
        runs-on: ubuntu-latest
        name: Lint Code
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup Environment
              uses: ./.github/actions/setup
              with:
                  node-version: '20'
                  bun-version: 'latest'

            - name: Run linter
              run: bun run lint

    format:
        runs-on: ubuntu-latest
        name: Check Code Formatting
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup Environment
              uses: ./.github/actions/setup
              with:
                  node-version: '20'
                  bun-version: 'latest'

            - name: Check code formatting
              run: bun run format:check

    build:
        runs-on: ubuntu-latest
        name: Build Project
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup Environment
              uses: ./.github/actions/setup
              with:
                  node-version: '20'
                  bun-version: 'latest'

            - name: Build the project
              run: bun run build

    test:
        runs-on: ubuntu-latest
        name: Unit Test Project
        env:
            CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup Environment
              uses: ./.github/actions/setup
              with:
                  node-version: '20'
                  bun-version: 'latest'

            - name: Setup CodeClimate
              uses: ./.github/actions/setup-codeclimate

            - name: Run tests
              run: bun run test -- --coverage --coverage-reporter=lcov
              continue-on-error: true

            - name: Upload coverage artifact
              uses: actions/upload-artifact@v3
              with:
                  name: unit-test-coverage
                  path: coverage/lcov.info

    review:
        runs-on: ubuntu-latest
        needs: [lint, format, build, test]
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: AI Code Reviewer
              uses: freeedcom/ai-codereviewer@v2.7.0
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                  OPENAI_API_MODEL: 'gpt-4'
                  exclude: '**/*.json, **/*.md'

    integration-test:
        runs-on: ubuntu-latest
        name: Integration Test Project
        needs: [lint, format, build, test]
        env:
            CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        services:
            dynamodb:
                image: amazon/dynamodb-local
                ports:
                    - 8000:8000
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Environment
              uses: ./.github/actions/setup
              with:
                  node-version: '20'
                  bun-version: 'latest'

            - name: Wait for DynamoDB service to be ready
              run: |
                  for i in {1..10}; do
                    if nc -z localhost 8000; then
                      echo "DynamoDB is up!"
                      break
                    fi
                    echo "Waiting for DynamoDB..."
                    sleep 2
                  done

            - name: Setup CodeClimate
              uses: ./.github/actions/setup-codeclimate

            - name: Run integration tests
              env:
                  AWS_ACCESS_KEY_ID: 'fakeMyKeyId'
                  AWS_SECRET_ACCESS_KEY: 'fakeSecretAccessKey'
                  AWS_REGION: 'local'
                  AWS_DYNAMODB_ENDPOINT: 'http://localhost:8000'
              run: bun run test:integration -- --coverage --coverage-reporter=lcov
              continue-on-error: true

            - name: Upload coverage artifact
              uses: actions/upload-artifact@v3
              with:
                  name: unit-test-coverage
                  path: coverage/lcov.info

    coverage-report:
        runs-on: ubuntu-latest
        needs: [test, integration-test]
        env:
            CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Download unit test coverage artifact
              uses: actions/download-artifact@v3
              with:
                  name: unit-test-coverage
                  path: ./coverage/unit

            - name: Download integration test coverage artifact
              uses: actions/download-artifact@v3
              with:
                  name: integration-test-coverage
                  path: ./coverage/integration

            - name: Setup CodeClimate
              uses: ./.github/actions/setup-codeclimate

            - name: Format unit test coverage
              run: |
                  ./cc-test-reporter format-coverage -t lcov -o codeclimate.unit.json ./coverage/unit/lcov.info

            - name: Format integration test coverage
              run: |
                  ./cc-test-reporter format-coverage -t lcov -o codeclimate.integration.json ./coverage/integration/lcov.info

            - name: Sum coverage reports
              run: |
                  ./cc-test-reporter sum-coverage codeclimate.unit.json codeclimate.integration.json -o codeclimate.total.json

            - name: Upload coverage to CodeClimate
              run: |
                  ./cc-test-reporter upload-coverage -i codeclimate.total.json
